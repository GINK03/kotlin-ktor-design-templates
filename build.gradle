def host;

def serverEngineProp = project.hasProperty('serverEngine') ? project.serverEngine : 'netty'
def enableAlpnProp = project.hasProperty('enableAlpn')

switch (serverEngineProp) {
    case 'jetty': host = 'jetty'; break
    case 'netty': host = 'netty'; break
    case 'tomcat': host = 'tomcat'; break
    case 'cio': host = 'cio'; break
    default: throw new InvalidUserDataException("Unknown engine ${project.serverEngine}")
}


subprojects {
    def withWar = project.file('web').isDirectory()

    apply plugin: 'application'

    if (withWar) {
        apply plugin: 'war'

        war {
            webAppDirName = 'web'
        }
    }

    dependencies {
        compile project(":ktor-server:ktor-server-core")
        compile "org.slf4j:jul-to-slf4j:1.7.12"

        compile group: 'ch.qos.logback', name: 'logback-classic', version: logback_version

        compile project(":ktor-server:ktor-server-$host")

        if (enableAlpnProp) {
            if (serverEngineProp == 'netty') {
                def nativeClassifier;
                def osName = System.getProperty('os.name').toLowerCase()

                if (osName.contains('win')) {
                    nativeClassifier = 'windows-x86_64'
                } else if (osName.contains('linux')) {
                    nativeClassifier = 'linux-x86_64'
                } else if (osName.contains('mac')) {
                    nativeClassifier = 'osx-x86_64'
                } else {
                    throw new InvalidUserDataException("Unsupoprted os family $osName")
                }

                compile group: 'io.netty', name: 'netty-tcnative', version: netty_tcnative_version
                compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: netty_tcnative_version
                compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: netty_tcnative_version, classifier: nativeClassifier
            } else if (serverEngineProp == 'jetty') {
                boot group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: jetty_alpn_boot_version
            }
        }

        if (withWar) {
            compile project(':ktor-server:ktor-server-servlet')
        }
    }

    mainClassName = "io.ktor.server.${host}.DevelopmentEngine"

    afterEvaluate {
        def bootClasspath = configurations.boot.files
        def runTask = getTasksByName("run", false).first() as JavaExec

        runTask.jvmArgs(bootClasspath.collect { "-Xbootclasspath/p:${it.absolutePath}" })
        if (project.hasProperty("jmc")) {
            runTask.jvmArgs("-XX:+UnlockCommercialFeatures", 
                            "-XX:+FlightRecorder",
                            "-XX:FlightRecorderOptions=stackdepth=512",
                            "-XX:+UnlockDiagnosticVMOptions",
                            "-XX:+DebugNonSafepoints")
        }

        if (project.hasProperty("heapSize")) {
            runTask.maxHeapSize = project.heapSize
        }
    }
}
